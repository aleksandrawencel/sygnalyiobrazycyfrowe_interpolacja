from typing import NamedTuple, Sequence
import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
from sklearn import metrics

class PlotData(NamedTuple):
    """Simple container for plot data"""
    x: Sequence[float]
    y: Sequence[float]

def plot_interpolation(measure: PlotData, interpolation: PlotData, real: PlotData, figsize=(12, 8)):
    """Plot the interpolation, measurements and the real function"""
    figure = plt.figure(figsize=figsize)

    plt.scatter(measure.x, measure.y, label="Measurements")
    plt.plot(interpolation.x, interpolation.y, label="Interpolation")
    plt.plot(real.x, real.y, label="Real Function")

    plt.legend()

def sample_hold_kernel(x: np.ndarray, offset: float, width: float) -> np.ndarray:
    """Sample and hold interpolation kernel"""
    x = x - offset
    return (x >= 0) * (x < width)

def nearest_neighbour_kernel(x: np.ndarray, offset: float, width: float) -> np.ndarray:
    """Nearest neighbour interpolation kernel"""
    x = x - offset
    return (x >= (-1 * width / 2)) * (x < width / 2)

def linear_kernel(x: np.ndarray, offset: float, width: float) -> np.ndarray:
    """Linear interpolation kernel"""
    x = x - offset
    x = x / width
    return (1 - np.abs(x)) * (np.abs(x) < 1)

def conv1d_interpolate(x_measure: np.ndarray, y_measure: np.ndarray, x_interpolate: np.ndarray, kernel: callable) -> np.ndarray:

    width = x_measure[1] - x_measure[0]  # store period between samples
    kernels = [kernel(x_interpolate, offset=offset, width=width) for offset in x_measure]

    return y_measure @ kernels

# Definicja funkcji
def simple(x):
    return np.sin(2 * x)

def inverted_sin(x):
    return np.sin(1 / x)

def sign(x):
    return np.sign(np.sin(8 * x))

# Przykładowe dane
n_samples = 100
n_predictions = 10_000

x = np.linspace(1e-6, 2 * np.pi, n_samples)
y = simple(x)

x_interp = np.linspace(1e-6, 2 * np.pi, n_predictions)
y_interp = conv1d_interpolate(x, y, x_interp, sample_hold_kernel)
y_true = simple(x_interp)

# Wizualizacja wyników
print(f"MSE (Sample and Hold): {metrics.mean_squared_error(y_pred=y_interp, y_true=y_true):.8f}")
plot_interpolation(measure=PlotData(x=x, y=y), interpolation=PlotData(x=x_interp, y=y_interp), real=PlotData(x=x_interp, y=y_true))

plt.show()


y = simple(x)

# Interpolacja z użyciem kernela nearest_neighbour_kernel
y_interp_nearest_neighbour = conv1d_interpolate(x, y, x_interp, nearest_neighbour_kernel)
print(f"MSE (Nearest Neighbour): {metrics.mean_squared_error(y_pred=y_interp_nearest_neighbour, y_true=y_true):.8f}")
plot_interpolation(measure=PlotData(x=x, y=y), interpolation=PlotData(x=x_interp, y=y_interp_nearest_neighbour), real=PlotData(x=x_interp, y=y_true))
plt.title("Interpolation for sin(x) (Nearest Neighbour)")
plt.show()

# Interpolacja z użyciem kernela linear_kernel
y_interp_linear = conv1d_interpolate(x, y, x_interp, linear_kernel)
print(f"MSE (Linear): {metrics.mean_squared_error(y_pred=y_interp_linear, y_true=y_true):.8f}")
plot_interpolation(measure=PlotData(x=x, y=y), interpolation=PlotData(x=x_interp, y=y_interp_linear), real=PlotData(x=x_interp, y=y_true))
plt.title("Interpolation for sin(x) (Linear)")
plt.show()



y = inverted_sin(x)

y_interp_sample_hold = conv1d_interpolate(x, y, x_interp, sample_hold_kernel)
y_interp_nearest_neighbour = conv1d_interpolate(x, y, x_interp, nearest_neighbour_kernel)
y_interp_linear = conv1d_interpolate(x, y, x_interp, linear_kernel)
y_true = inverted_sin(x_interp)

# Wizualizacja wyników dla inverted_sin
print(f"MSE (Sample and Hold): {metrics.mean_squared_error(y_pred=y_interp_sample_hold, y_true=y_true):.8f}")
print(f"MSE (Nearest Neighbour): {metrics.mean_squared_error(y_pred=y_interp_nearest_neighbour, y_true=y_true):.8f}")
print(f"MSE (Linear): {metrics.mean_squared_error(y_pred=y_interp_linear, y_true=y_true):.8f}")

plot_interpolation(measure=PlotData(x=x, y=y), interpolation=PlotData(x=x_interp, y=y_interp_sample_hold), real=PlotData(x=x_interp, y=y_true))
plt.title("Interpolation for inverted_sin (Sample and Hold)")
plt.show()

plot_interpolation(measure=PlotData(x=x, y=y), interpolation=PlotData(x=x_interp, y=y_interp_nearest_neighbour), real=PlotData(x=x_interp, y=y_true))
plt.title("Interpolation for inverted_sin (Nearest Neighbour)")
plt.show()

plot_interpolation(measure=PlotData(x=x, y=y), interpolation=PlotData(x=x_interp, y=y_interp_linear), real=PlotData(x=x_interp, y=y_true))
plt.title("Interpolation for inverted_sin (Linear)")
plt.show()


y = sign(x)

y_interp_sample_hold = conv1d_interpolate(x, y, x_interp, sample_hold_kernel)
y_interp_nearest_neighbour = conv1d_interpolate(x, y, x_interp, nearest_neighbour_kernel)
y_interp_linear = conv1d_interpolate(x, y, x_interp, linear_kernel)
y_true = sign(x_interp)

# Wizualizacja wyników dla sign
print(f"MSE (Sample and Hold): {metrics.mean_squared_error(y_pred=y_interp_sample_hold, y_true=y_true):.8f}")
print(f"MSE (Nearest Neighbour): {metrics.mean_squared_error(y_pred=y_interp_nearest_neighbour, y_true=y_true):.8f}")
print(f"MSE (Linear): {metrics.mean_squared_error(y_pred=y_interp_linear, y_true=y_true):.8f}")

plot_interpolation(measure=PlotData(x=x, y=y), interpolation=PlotData(x=x_interp, y=y_interp_sample_hold), real=PlotData(x=x_interp, y=y_true))
plt.title("Interpolation for sign (Sample and Hold)")
plt.show()

plot_interpolation(measure=PlotData(x=x, y=y), interpolation=PlotData(x=x_interp, y=y_interp_nearest_neighbour), real=PlotData(x=x_interp, y=y_true))
plt.title("Interpolation for sign (Nearest Neighbour)")
plt.show()

plot_interpolation(measure=PlotData(x=x, y=y), interpolation=PlotData(x=x_interp, y=y_interp_linear), real=PlotData(x=x_interp, y=y_true))
plt.title("Interpolation for sign (Linear)")
plt.show()
